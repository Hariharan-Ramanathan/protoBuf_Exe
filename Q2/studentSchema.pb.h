// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studentSchema.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_studentSchema_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_studentSchema_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_studentSchema_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_studentSchema_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_studentSchema_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_studentSchema_2eproto_metadata_getter(int index);
namespace Q2 {
class allStudents;
struct allStudentsDefaultTypeInternal;
extern allStudentsDefaultTypeInternal _allStudents_default_instance_;
class student;
struct studentDefaultTypeInternal;
extern studentDefaultTypeInternal _student_default_instance_;
class student_guideBy;
struct student_guideByDefaultTypeInternal;
extern student_guideByDefaultTypeInternal _student_guideBy_default_instance_;
class student_semesterDetails;
struct student_semesterDetailsDefaultTypeInternal;
extern student_semesterDetailsDefaultTypeInternal _student_semesterDetails_default_instance_;
class student_semesterDetails_Marks;
struct student_semesterDetails_MarksDefaultTypeInternal;
extern student_semesterDetails_MarksDefaultTypeInternal _student_semesterDetails_Marks_default_instance_;
}  // namespace Q2
PROTOBUF_NAMESPACE_OPEN
template<> ::Q2::allStudents* Arena::CreateMaybeMessage<::Q2::allStudents>(Arena*);
template<> ::Q2::student* Arena::CreateMaybeMessage<::Q2::student>(Arena*);
template<> ::Q2::student_guideBy* Arena::CreateMaybeMessage<::Q2::student_guideBy>(Arena*);
template<> ::Q2::student_semesterDetails* Arena::CreateMaybeMessage<::Q2::student_semesterDetails>(Arena*);
template<> ::Q2::student_semesterDetails_Marks* Arena::CreateMaybeMessage<::Q2::student_semesterDetails_Marks>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Q2 {

enum student_guide : int {
  student_guide_PARENT = 0,
  student_guide_GUARDIAN = 1,
  student_guide_student_guide_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  student_guide_student_guide_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool student_guide_IsValid(int value);
constexpr student_guide student_guide_guide_MIN = student_guide_PARENT;
constexpr student_guide student_guide_guide_MAX = student_guide_GUARDIAN;
constexpr int student_guide_guide_ARRAYSIZE = student_guide_guide_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* student_guide_descriptor();
template<typename T>
inline const std::string& student_guide_Name(T enum_t_value) {
  static_assert(::std::is_same<T, student_guide>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function student_guide_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    student_guide_descriptor(), enum_t_value);
}
inline bool student_guide_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, student_guide* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<student_guide>(
    student_guide_descriptor(), name, value);
}
enum student_parents : int {
  student_parents_FATHER = 0,
  student_parents_MOTHER = 1,
  student_parents_student_parents_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  student_parents_student_parents_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool student_parents_IsValid(int value);
constexpr student_parents student_parents_parents_MIN = student_parents_FATHER;
constexpr student_parents student_parents_parents_MAX = student_parents_MOTHER;
constexpr int student_parents_parents_ARRAYSIZE = student_parents_parents_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* student_parents_descriptor();
template<typename T>
inline const std::string& student_parents_Name(T enum_t_value) {
  static_assert(::std::is_same<T, student_parents>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function student_parents_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    student_parents_descriptor(), enum_t_value);
}
inline bool student_parents_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, student_parents* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<student_parents>(
    student_parents_descriptor(), name, value);
}
// ===================================================================

class student_guideBy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Q2.student.guideBy) */ {
 public:
  inline student_guideBy() : student_guideBy(nullptr) {}
  virtual ~student_guideBy();
  explicit constexpr student_guideBy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  student_guideBy(const student_guideBy& from);
  student_guideBy(student_guideBy&& from) noexcept
    : student_guideBy() {
    *this = ::std::move(from);
  }

  inline student_guideBy& operator=(const student_guideBy& from) {
    CopyFrom(from);
    return *this;
  }
  inline student_guideBy& operator=(student_guideBy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const student_guideBy& default_instance() {
    return *internal_default_instance();
  }
  static inline const student_guideBy* internal_default_instance() {
    return reinterpret_cast<const student_guideBy*>(
               &_student_guideBy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(student_guideBy& a, student_guideBy& b) {
    a.Swap(&b);
  }
  inline void Swap(student_guideBy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(student_guideBy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline student_guideBy* New() const final {
    return CreateMaybeMessage<student_guideBy>(nullptr);
  }

  student_guideBy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<student_guideBy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const student_guideBy& from);
  void MergeFrom(const student_guideBy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(student_guideBy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Q2.student.guideBy";
  }
  protected:
  explicit student_guideBy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_studentSchema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 1,
    kNameFieldNumber = 2,
    kGTypeFieldNumber = 3,
    kPTypeFieldNumber = 4,
  };
  // string number = 1;
  void clear_number();
  const std::string& number() const;
  void set_number(const std::string& value);
  void set_number(std::string&& value);
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  std::string* mutable_number();
  std::string* release_number();
  void set_allocated_number(std::string* number);
  private:
  const std::string& _internal_number() const;
  void _internal_set_number(const std::string& value);
  std::string* _internal_mutable_number();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Q2.student.guide gType = 3;
  void clear_gtype();
  ::Q2::student_guide gtype() const;
  void set_gtype(::Q2::student_guide value);
  private:
  ::Q2::student_guide _internal_gtype() const;
  void _internal_set_gtype(::Q2::student_guide value);
  public:

  // .Q2.student.parents pType = 4;
  void clear_ptype();
  ::Q2::student_parents ptype() const;
  void set_ptype(::Q2::student_parents value);
  private:
  ::Q2::student_parents _internal_ptype() const;
  void _internal_set_ptype(::Q2::student_parents value);
  public:

  // @@protoc_insertion_point(class_scope:Q2.student.guideBy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int gtype_;
  int ptype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studentSchema_2eproto;
};
// -------------------------------------------------------------------

class student_semesterDetails_Marks PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Q2.student.semesterDetails.Marks) */ {
 public:
  inline student_semesterDetails_Marks() : student_semesterDetails_Marks(nullptr) {}
  virtual ~student_semesterDetails_Marks();
  explicit constexpr student_semesterDetails_Marks(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  student_semesterDetails_Marks(const student_semesterDetails_Marks& from);
  student_semesterDetails_Marks(student_semesterDetails_Marks&& from) noexcept
    : student_semesterDetails_Marks() {
    *this = ::std::move(from);
  }

  inline student_semesterDetails_Marks& operator=(const student_semesterDetails_Marks& from) {
    CopyFrom(from);
    return *this;
  }
  inline student_semesterDetails_Marks& operator=(student_semesterDetails_Marks&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const student_semesterDetails_Marks& default_instance() {
    return *internal_default_instance();
  }
  static inline const student_semesterDetails_Marks* internal_default_instance() {
    return reinterpret_cast<const student_semesterDetails_Marks*>(
               &_student_semesterDetails_Marks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(student_semesterDetails_Marks& a, student_semesterDetails_Marks& b) {
    a.Swap(&b);
  }
  inline void Swap(student_semesterDetails_Marks* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(student_semesterDetails_Marks* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline student_semesterDetails_Marks* New() const final {
    return CreateMaybeMessage<student_semesterDetails_Marks>(nullptr);
  }

  student_semesterDetails_Marks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<student_semesterDetails_Marks>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const student_semesterDetails_Marks& from);
  void MergeFrom(const student_semesterDetails_Marks& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(student_semesterDetails_Marks* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Q2.student.semesterDetails.Marks";
  }
  protected:
  explicit student_semesterDetails_Marks(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_studentSchema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubjectNameFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // string subjectName = 1;
  bool has_subjectname() const;
  private:
  bool _internal_has_subjectname() const;
  public:
  void clear_subjectname();
  const std::string& subjectname() const;
  void set_subjectname(const std::string& value);
  void set_subjectname(std::string&& value);
  void set_subjectname(const char* value);
  void set_subjectname(const char* value, size_t size);
  std::string* mutable_subjectname();
  std::string* release_subjectname();
  void set_allocated_subjectname(std::string* subjectname);
  private:
  const std::string& _internal_subjectname() const;
  void _internal_set_subjectname(const std::string& value);
  std::string* _internal_mutable_subjectname();
  public:

  // int32 score = 2;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Q2.student.semesterDetails.Marks)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subjectname_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  friend struct ::TableStruct_studentSchema_2eproto;
};
// -------------------------------------------------------------------

class student_semesterDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Q2.student.semesterDetails) */ {
 public:
  inline student_semesterDetails() : student_semesterDetails(nullptr) {}
  virtual ~student_semesterDetails();
  explicit constexpr student_semesterDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  student_semesterDetails(const student_semesterDetails& from);
  student_semesterDetails(student_semesterDetails&& from) noexcept
    : student_semesterDetails() {
    *this = ::std::move(from);
  }

  inline student_semesterDetails& operator=(const student_semesterDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline student_semesterDetails& operator=(student_semesterDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const student_semesterDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const student_semesterDetails* internal_default_instance() {
    return reinterpret_cast<const student_semesterDetails*>(
               &_student_semesterDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(student_semesterDetails& a, student_semesterDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(student_semesterDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(student_semesterDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline student_semesterDetails* New() const final {
    return CreateMaybeMessage<student_semesterDetails>(nullptr);
  }

  student_semesterDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<student_semesterDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const student_semesterDetails& from);
  void MergeFrom(const student_semesterDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(student_semesterDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Q2.student.semesterDetails";
  }
  protected:
  explicit student_semesterDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_studentSchema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef student_semesterDetails_Marks Marks;

  // accessors -------------------------------------------------------

  enum : int {
    kMarksFieldNumber = 2,
    kNumberFieldNumber = 1,
  };
  // repeated .Q2.student.semesterDetails.Marks marks = 2;
  int marks_size() const;
  private:
  int _internal_marks_size() const;
  public:
  void clear_marks();
  ::Q2::student_semesterDetails_Marks* mutable_marks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Q2::student_semesterDetails_Marks >*
      mutable_marks();
  private:
  const ::Q2::student_semesterDetails_Marks& _internal_marks(int index) const;
  ::Q2::student_semesterDetails_Marks* _internal_add_marks();
  public:
  const ::Q2::student_semesterDetails_Marks& marks(int index) const;
  ::Q2::student_semesterDetails_Marks* add_marks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Q2::student_semesterDetails_Marks >&
      marks() const;

  // int32 number = 1;
  bool has_number() const;
  private:
  bool _internal_has_number() const;
  public:
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Q2.student.semesterDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Q2::student_semesterDetails_Marks > marks_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_;
  friend struct ::TableStruct_studentSchema_2eproto;
};
// -------------------------------------------------------------------

class student PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Q2.student) */ {
 public:
  inline student() : student(nullptr) {}
  virtual ~student();
  explicit constexpr student(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  student(const student& from);
  student(student&& from) noexcept
    : student() {
    *this = ::std::move(from);
  }

  inline student& operator=(const student& from) {
    CopyFrom(from);
    return *this;
  }
  inline student& operator=(student&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const student& default_instance() {
    return *internal_default_instance();
  }
  static inline const student* internal_default_instance() {
    return reinterpret_cast<const student*>(
               &_student_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(student& a, student& b) {
    a.Swap(&b);
  }
  inline void Swap(student* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(student* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline student* New() const final {
    return CreateMaybeMessage<student>(nullptr);
  }

  student* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<student>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const student& from);
  void MergeFrom(const student& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(student* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Q2.student";
  }
  protected:
  explicit student(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_studentSchema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef student_guideBy guideBy;
  typedef student_semesterDetails semesterDetails;

  typedef student_guide guide;
  static constexpr guide PARENT =
    student_guide_PARENT;
  static constexpr guide GUARDIAN =
    student_guide_GUARDIAN;
  static inline bool guide_IsValid(int value) {
    return student_guide_IsValid(value);
  }
  static constexpr guide guide_MIN =
    student_guide_guide_MIN;
  static constexpr guide guide_MAX =
    student_guide_guide_MAX;
  static constexpr int guide_ARRAYSIZE =
    student_guide_guide_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  guide_descriptor() {
    return student_guide_descriptor();
  }
  template<typename T>
  static inline const std::string& guide_Name(T enum_t_value) {
    static_assert(::std::is_same<T, guide>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function guide_Name.");
    return student_guide_Name(enum_t_value);
  }
  static inline bool guide_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      guide* value) {
    return student_guide_Parse(name, value);
  }

  typedef student_parents parents;
  static constexpr parents FATHER =
    student_parents_FATHER;
  static constexpr parents MOTHER =
    student_parents_MOTHER;
  static inline bool parents_IsValid(int value) {
    return student_parents_IsValid(value);
  }
  static constexpr parents parents_MIN =
    student_parents_parents_MIN;
  static constexpr parents parents_MAX =
    student_parents_parents_MAX;
  static constexpr int parents_ARRAYSIZE =
    student_parents_parents_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  parents_descriptor() {
    return student_parents_descriptor();
  }
  template<typename T>
  static inline const std::string& parents_Name(T enum_t_value) {
    static_assert(::std::is_same<T, parents>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function parents_Name.");
    return student_parents_Name(enum_t_value);
  }
  static inline bool parents_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      parents* value) {
    return student_parents_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGuideByFieldNumber = 5,
    kNameFieldNumber = 1,
    kSecFieldNumber = 4,
    kSemesterDetailsFieldNumber = 6,
    kRollNumFieldNumber = 2,
    kClassFieldNumber = 3,
  };
  // repeated .Q2.student.guideBy guide_by = 5;
  int guide_by_size() const;
  private:
  int _internal_guide_by_size() const;
  public:
  void clear_guide_by();
  ::Q2::student_guideBy* mutable_guide_by(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Q2::student_guideBy >*
      mutable_guide_by();
  private:
  const ::Q2::student_guideBy& _internal_guide_by(int index) const;
  ::Q2::student_guideBy* _internal_add_guide_by();
  public:
  const ::Q2::student_guideBy& guide_by(int index) const;
  ::Q2::student_guideBy* add_guide_by();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Q2::student_guideBy >&
      guide_by() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string sec = 4;
  void clear_sec();
  const std::string& sec() const;
  void set_sec(const std::string& value);
  void set_sec(std::string&& value);
  void set_sec(const char* value);
  void set_sec(const char* value, size_t size);
  std::string* mutable_sec();
  std::string* release_sec();
  void set_allocated_sec(std::string* sec);
  private:
  const std::string& _internal_sec() const;
  void _internal_set_sec(const std::string& value);
  std::string* _internal_mutable_sec();
  public:

  // .Q2.student.semesterDetails semester_details = 6;
  bool has_semester_details() const;
  private:
  bool _internal_has_semester_details() const;
  public:
  void clear_semester_details();
  const ::Q2::student_semesterDetails& semester_details() const;
  ::Q2::student_semesterDetails* release_semester_details();
  ::Q2::student_semesterDetails* mutable_semester_details();
  void set_allocated_semester_details(::Q2::student_semesterDetails* semester_details);
  private:
  const ::Q2::student_semesterDetails& _internal_semester_details() const;
  ::Q2::student_semesterDetails* _internal_mutable_semester_details();
  public:
  void unsafe_arena_set_allocated_semester_details(
      ::Q2::student_semesterDetails* semester_details);
  ::Q2::student_semesterDetails* unsafe_arena_release_semester_details();

  // int32 rollNum = 2;
  void clear_rollnum();
  ::PROTOBUF_NAMESPACE_ID::int32 rollnum() const;
  void set_rollnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rollnum() const;
  void _internal_set_rollnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 class = 3;
  void clear_class_();
  ::PROTOBUF_NAMESPACE_ID::int32 class_() const;
  void set_class_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_class_() const;
  void _internal_set_class_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Q2.student)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Q2::student_guideBy > guide_by_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sec_;
  ::Q2::student_semesterDetails* semester_details_;
  ::PROTOBUF_NAMESPACE_ID::int32 rollnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 class__;
  friend struct ::TableStruct_studentSchema_2eproto;
};
// -------------------------------------------------------------------

class allStudents PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Q2.allStudents) */ {
 public:
  inline allStudents() : allStudents(nullptr) {}
  virtual ~allStudents();
  explicit constexpr allStudents(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  allStudents(const allStudents& from);
  allStudents(allStudents&& from) noexcept
    : allStudents() {
    *this = ::std::move(from);
  }

  inline allStudents& operator=(const allStudents& from) {
    CopyFrom(from);
    return *this;
  }
  inline allStudents& operator=(allStudents&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const allStudents& default_instance() {
    return *internal_default_instance();
  }
  static inline const allStudents* internal_default_instance() {
    return reinterpret_cast<const allStudents*>(
               &_allStudents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(allStudents& a, allStudents& b) {
    a.Swap(&b);
  }
  inline void Swap(allStudents* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(allStudents* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline allStudents* New() const final {
    return CreateMaybeMessage<allStudents>(nullptr);
  }

  allStudents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<allStudents>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const allStudents& from);
  void MergeFrom(const allStudents& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(allStudents* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Q2.allStudents";
  }
  protected:
  explicit allStudents(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_studentSchema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllStudentFieldNumber = 1,
  };
  // repeated .Q2.student all_student = 1;
  int all_student_size() const;
  private:
  int _internal_all_student_size() const;
  public:
  void clear_all_student();
  ::Q2::student* mutable_all_student(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Q2::student >*
      mutable_all_student();
  private:
  const ::Q2::student& _internal_all_student(int index) const;
  ::Q2::student* _internal_add_all_student();
  public:
  const ::Q2::student& all_student(int index) const;
  ::Q2::student* add_all_student();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Q2::student >&
      all_student() const;

  // @@protoc_insertion_point(class_scope:Q2.allStudents)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Q2::student > all_student_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studentSchema_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// student_guideBy

// string number = 1;
inline void student_guideBy::clear_number() {
  number_.ClearToEmpty();
}
inline const std::string& student_guideBy::number() const {
  // @@protoc_insertion_point(field_get:Q2.student.guideBy.number)
  return _internal_number();
}
inline void student_guideBy::set_number(const std::string& value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:Q2.student.guideBy.number)
}
inline std::string* student_guideBy::mutable_number() {
  // @@protoc_insertion_point(field_mutable:Q2.student.guideBy.number)
  return _internal_mutable_number();
}
inline const std::string& student_guideBy::_internal_number() const {
  return number_.Get();
}
inline void student_guideBy::_internal_set_number(const std::string& value) {
  
  number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void student_guideBy::set_number(std::string&& value) {
  
  number_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Q2.student.guideBy.number)
}
inline void student_guideBy::set_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Q2.student.guideBy.number)
}
inline void student_guideBy::set_number(const char* value,
    size_t size) {
  
  number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Q2.student.guideBy.number)
}
inline std::string* student_guideBy::_internal_mutable_number() {
  
  return number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* student_guideBy::release_number() {
  // @@protoc_insertion_point(field_release:Q2.student.guideBy.number)
  return number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void student_guideBy::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Q2.student.guideBy.number)
}

// string name = 2;
inline void student_guideBy::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& student_guideBy::name() const {
  // @@protoc_insertion_point(field_get:Q2.student.guideBy.name)
  return _internal_name();
}
inline void student_guideBy::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Q2.student.guideBy.name)
}
inline std::string* student_guideBy::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Q2.student.guideBy.name)
  return _internal_mutable_name();
}
inline const std::string& student_guideBy::_internal_name() const {
  return name_.Get();
}
inline void student_guideBy::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void student_guideBy::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Q2.student.guideBy.name)
}
inline void student_guideBy::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Q2.student.guideBy.name)
}
inline void student_guideBy::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Q2.student.guideBy.name)
}
inline std::string* student_guideBy::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* student_guideBy::release_name() {
  // @@protoc_insertion_point(field_release:Q2.student.guideBy.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void student_guideBy::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Q2.student.guideBy.name)
}

// .Q2.student.guide gType = 3;
inline void student_guideBy::clear_gtype() {
  gtype_ = 0;
}
inline ::Q2::student_guide student_guideBy::_internal_gtype() const {
  return static_cast< ::Q2::student_guide >(gtype_);
}
inline ::Q2::student_guide student_guideBy::gtype() const {
  // @@protoc_insertion_point(field_get:Q2.student.guideBy.gType)
  return _internal_gtype();
}
inline void student_guideBy::_internal_set_gtype(::Q2::student_guide value) {
  
  gtype_ = value;
}
inline void student_guideBy::set_gtype(::Q2::student_guide value) {
  _internal_set_gtype(value);
  // @@protoc_insertion_point(field_set:Q2.student.guideBy.gType)
}

// .Q2.student.parents pType = 4;
inline void student_guideBy::clear_ptype() {
  ptype_ = 0;
}
inline ::Q2::student_parents student_guideBy::_internal_ptype() const {
  return static_cast< ::Q2::student_parents >(ptype_);
}
inline ::Q2::student_parents student_guideBy::ptype() const {
  // @@protoc_insertion_point(field_get:Q2.student.guideBy.pType)
  return _internal_ptype();
}
inline void student_guideBy::_internal_set_ptype(::Q2::student_parents value) {
  
  ptype_ = value;
}
inline void student_guideBy::set_ptype(::Q2::student_parents value) {
  _internal_set_ptype(value);
  // @@protoc_insertion_point(field_set:Q2.student.guideBy.pType)
}

// -------------------------------------------------------------------

// student_semesterDetails_Marks

// string subjectName = 1;
inline bool student_semesterDetails_Marks::_internal_has_subjectname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool student_semesterDetails_Marks::has_subjectname() const {
  return _internal_has_subjectname();
}
inline void student_semesterDetails_Marks::clear_subjectname() {
  subjectname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& student_semesterDetails_Marks::subjectname() const {
  // @@protoc_insertion_point(field_get:Q2.student.semesterDetails.Marks.subjectName)
  return _internal_subjectname();
}
inline void student_semesterDetails_Marks::set_subjectname(const std::string& value) {
  _internal_set_subjectname(value);
  // @@protoc_insertion_point(field_set:Q2.student.semesterDetails.Marks.subjectName)
}
inline std::string* student_semesterDetails_Marks::mutable_subjectname() {
  // @@protoc_insertion_point(field_mutable:Q2.student.semesterDetails.Marks.subjectName)
  return _internal_mutable_subjectname();
}
inline const std::string& student_semesterDetails_Marks::_internal_subjectname() const {
  return subjectname_.Get();
}
inline void student_semesterDetails_Marks::_internal_set_subjectname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  subjectname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void student_semesterDetails_Marks::set_subjectname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  subjectname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Q2.student.semesterDetails.Marks.subjectName)
}
inline void student_semesterDetails_Marks::set_subjectname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  subjectname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Q2.student.semesterDetails.Marks.subjectName)
}
inline void student_semesterDetails_Marks::set_subjectname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  subjectname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Q2.student.semesterDetails.Marks.subjectName)
}
inline std::string* student_semesterDetails_Marks::_internal_mutable_subjectname() {
  _has_bits_[0] |= 0x00000001u;
  return subjectname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* student_semesterDetails_Marks::release_subjectname() {
  // @@protoc_insertion_point(field_release:Q2.student.semesterDetails.Marks.subjectName)
  if (!_internal_has_subjectname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return subjectname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void student_semesterDetails_Marks::set_allocated_subjectname(std::string* subjectname) {
  if (subjectname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  subjectname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subjectname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Q2.student.semesterDetails.Marks.subjectName)
}

// int32 score = 2;
inline bool student_semesterDetails_Marks::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool student_semesterDetails_Marks::has_score() const {
  return _internal_has_score();
}
inline void student_semesterDetails_Marks::clear_score() {
  score_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 student_semesterDetails_Marks::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 student_semesterDetails_Marks::score() const {
  // @@protoc_insertion_point(field_get:Q2.student.semesterDetails.Marks.score)
  return _internal_score();
}
inline void student_semesterDetails_Marks::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  score_ = value;
}
inline void student_semesterDetails_Marks::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:Q2.student.semesterDetails.Marks.score)
}

// -------------------------------------------------------------------

// student_semesterDetails

// int32 number = 1;
inline bool student_semesterDetails::_internal_has_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool student_semesterDetails::has_number() const {
  return _internal_has_number();
}
inline void student_semesterDetails::clear_number() {
  number_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 student_semesterDetails::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 student_semesterDetails::number() const {
  // @@protoc_insertion_point(field_get:Q2.student.semesterDetails.number)
  return _internal_number();
}
inline void student_semesterDetails::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  number_ = value;
}
inline void student_semesterDetails::set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:Q2.student.semesterDetails.number)
}

// repeated .Q2.student.semesterDetails.Marks marks = 2;
inline int student_semesterDetails::_internal_marks_size() const {
  return marks_.size();
}
inline int student_semesterDetails::marks_size() const {
  return _internal_marks_size();
}
inline void student_semesterDetails::clear_marks() {
  marks_.Clear();
}
inline ::Q2::student_semesterDetails_Marks* student_semesterDetails::mutable_marks(int index) {
  // @@protoc_insertion_point(field_mutable:Q2.student.semesterDetails.marks)
  return marks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Q2::student_semesterDetails_Marks >*
student_semesterDetails::mutable_marks() {
  // @@protoc_insertion_point(field_mutable_list:Q2.student.semesterDetails.marks)
  return &marks_;
}
inline const ::Q2::student_semesterDetails_Marks& student_semesterDetails::_internal_marks(int index) const {
  return marks_.Get(index);
}
inline const ::Q2::student_semesterDetails_Marks& student_semesterDetails::marks(int index) const {
  // @@protoc_insertion_point(field_get:Q2.student.semesterDetails.marks)
  return _internal_marks(index);
}
inline ::Q2::student_semesterDetails_Marks* student_semesterDetails::_internal_add_marks() {
  return marks_.Add();
}
inline ::Q2::student_semesterDetails_Marks* student_semesterDetails::add_marks() {
  // @@protoc_insertion_point(field_add:Q2.student.semesterDetails.marks)
  return _internal_add_marks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Q2::student_semesterDetails_Marks >&
student_semesterDetails::marks() const {
  // @@protoc_insertion_point(field_list:Q2.student.semesterDetails.marks)
  return marks_;
}

// -------------------------------------------------------------------

// student

// string name = 1;
inline void student::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& student::name() const {
  // @@protoc_insertion_point(field_get:Q2.student.name)
  return _internal_name();
}
inline void student::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Q2.student.name)
}
inline std::string* student::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Q2.student.name)
  return _internal_mutable_name();
}
inline const std::string& student::_internal_name() const {
  return name_.Get();
}
inline void student::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void student::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Q2.student.name)
}
inline void student::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Q2.student.name)
}
inline void student::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Q2.student.name)
}
inline std::string* student::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* student::release_name() {
  // @@protoc_insertion_point(field_release:Q2.student.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void student::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Q2.student.name)
}

// int32 rollNum = 2;
inline void student::clear_rollnum() {
  rollnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 student::_internal_rollnum() const {
  return rollnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 student::rollnum() const {
  // @@protoc_insertion_point(field_get:Q2.student.rollNum)
  return _internal_rollnum();
}
inline void student::_internal_set_rollnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rollnum_ = value;
}
inline void student::set_rollnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rollnum(value);
  // @@protoc_insertion_point(field_set:Q2.student.rollNum)
}

// int32 class = 3;
inline void student::clear_class_() {
  class__ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 student::_internal_class_() const {
  return class__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 student::class_() const {
  // @@protoc_insertion_point(field_get:Q2.student.class)
  return _internal_class_();
}
inline void student::_internal_set_class_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  class__ = value;
}
inline void student::set_class_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_class_(value);
  // @@protoc_insertion_point(field_set:Q2.student.class)
}

// string sec = 4;
inline void student::clear_sec() {
  sec_.ClearToEmpty();
}
inline const std::string& student::sec() const {
  // @@protoc_insertion_point(field_get:Q2.student.sec)
  return _internal_sec();
}
inline void student::set_sec(const std::string& value) {
  _internal_set_sec(value);
  // @@protoc_insertion_point(field_set:Q2.student.sec)
}
inline std::string* student::mutable_sec() {
  // @@protoc_insertion_point(field_mutable:Q2.student.sec)
  return _internal_mutable_sec();
}
inline const std::string& student::_internal_sec() const {
  return sec_.Get();
}
inline void student::_internal_set_sec(const std::string& value) {
  
  sec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void student::set_sec(std::string&& value) {
  
  sec_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Q2.student.sec)
}
inline void student::set_sec(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Q2.student.sec)
}
inline void student::set_sec(const char* value,
    size_t size) {
  
  sec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Q2.student.sec)
}
inline std::string* student::_internal_mutable_sec() {
  
  return sec_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* student::release_sec() {
  // @@protoc_insertion_point(field_release:Q2.student.sec)
  return sec_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void student::set_allocated_sec(std::string* sec) {
  if (sec != nullptr) {
    
  } else {
    
  }
  sec_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sec,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Q2.student.sec)
}

// repeated .Q2.student.guideBy guide_by = 5;
inline int student::_internal_guide_by_size() const {
  return guide_by_.size();
}
inline int student::guide_by_size() const {
  return _internal_guide_by_size();
}
inline void student::clear_guide_by() {
  guide_by_.Clear();
}
inline ::Q2::student_guideBy* student::mutable_guide_by(int index) {
  // @@protoc_insertion_point(field_mutable:Q2.student.guide_by)
  return guide_by_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Q2::student_guideBy >*
student::mutable_guide_by() {
  // @@protoc_insertion_point(field_mutable_list:Q2.student.guide_by)
  return &guide_by_;
}
inline const ::Q2::student_guideBy& student::_internal_guide_by(int index) const {
  return guide_by_.Get(index);
}
inline const ::Q2::student_guideBy& student::guide_by(int index) const {
  // @@protoc_insertion_point(field_get:Q2.student.guide_by)
  return _internal_guide_by(index);
}
inline ::Q2::student_guideBy* student::_internal_add_guide_by() {
  return guide_by_.Add();
}
inline ::Q2::student_guideBy* student::add_guide_by() {
  // @@protoc_insertion_point(field_add:Q2.student.guide_by)
  return _internal_add_guide_by();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Q2::student_guideBy >&
student::guide_by() const {
  // @@protoc_insertion_point(field_list:Q2.student.guide_by)
  return guide_by_;
}

// .Q2.student.semesterDetails semester_details = 6;
inline bool student::_internal_has_semester_details() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || semester_details_ != nullptr);
  return value;
}
inline bool student::has_semester_details() const {
  return _internal_has_semester_details();
}
inline void student::clear_semester_details() {
  if (GetArena() == nullptr && semester_details_ != nullptr) {
    delete semester_details_;
  }
  semester_details_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Q2::student_semesterDetails& student::_internal_semester_details() const {
  const ::Q2::student_semesterDetails* p = semester_details_;
  return p != nullptr ? *p : reinterpret_cast<const ::Q2::student_semesterDetails&>(
      ::Q2::_student_semesterDetails_default_instance_);
}
inline const ::Q2::student_semesterDetails& student::semester_details() const {
  // @@protoc_insertion_point(field_get:Q2.student.semester_details)
  return _internal_semester_details();
}
inline void student::unsafe_arena_set_allocated_semester_details(
    ::Q2::student_semesterDetails* semester_details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(semester_details_);
  }
  semester_details_ = semester_details;
  if (semester_details) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Q2.student.semester_details)
}
inline ::Q2::student_semesterDetails* student::release_semester_details() {
  _has_bits_[0] &= ~0x00000001u;
  ::Q2::student_semesterDetails* temp = semester_details_;
  semester_details_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Q2::student_semesterDetails* student::unsafe_arena_release_semester_details() {
  // @@protoc_insertion_point(field_release:Q2.student.semester_details)
  _has_bits_[0] &= ~0x00000001u;
  ::Q2::student_semesterDetails* temp = semester_details_;
  semester_details_ = nullptr;
  return temp;
}
inline ::Q2::student_semesterDetails* student::_internal_mutable_semester_details() {
  _has_bits_[0] |= 0x00000001u;
  if (semester_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::Q2::student_semesterDetails>(GetArena());
    semester_details_ = p;
  }
  return semester_details_;
}
inline ::Q2::student_semesterDetails* student::mutable_semester_details() {
  // @@protoc_insertion_point(field_mutable:Q2.student.semester_details)
  return _internal_mutable_semester_details();
}
inline void student::set_allocated_semester_details(::Q2::student_semesterDetails* semester_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete semester_details_;
  }
  if (semester_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(semester_details);
    if (message_arena != submessage_arena) {
      semester_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, semester_details, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  semester_details_ = semester_details;
  // @@protoc_insertion_point(field_set_allocated:Q2.student.semester_details)
}

// -------------------------------------------------------------------

// allStudents

// repeated .Q2.student all_student = 1;
inline int allStudents::_internal_all_student_size() const {
  return all_student_.size();
}
inline int allStudents::all_student_size() const {
  return _internal_all_student_size();
}
inline void allStudents::clear_all_student() {
  all_student_.Clear();
}
inline ::Q2::student* allStudents::mutable_all_student(int index) {
  // @@protoc_insertion_point(field_mutable:Q2.allStudents.all_student)
  return all_student_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Q2::student >*
allStudents::mutable_all_student() {
  // @@protoc_insertion_point(field_mutable_list:Q2.allStudents.all_student)
  return &all_student_;
}
inline const ::Q2::student& allStudents::_internal_all_student(int index) const {
  return all_student_.Get(index);
}
inline const ::Q2::student& allStudents::all_student(int index) const {
  // @@protoc_insertion_point(field_get:Q2.allStudents.all_student)
  return _internal_all_student(index);
}
inline ::Q2::student* allStudents::_internal_add_all_student() {
  return all_student_.Add();
}
inline ::Q2::student* allStudents::add_all_student() {
  // @@protoc_insertion_point(field_add:Q2.allStudents.all_student)
  return _internal_add_all_student();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Q2::student >&
allStudents::all_student() const {
  // @@protoc_insertion_point(field_list:Q2.allStudents.all_student)
  return all_student_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Q2

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Q2::student_guide> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Q2::student_guide>() {
  return ::Q2::student_guide_descriptor();
}
template <> struct is_proto_enum< ::Q2::student_parents> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Q2::student_parents>() {
  return ::Q2::student_parents_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_studentSchema_2eproto
